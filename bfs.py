# -*- coding: utf-8 -*-
"""BFS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WrqnZDl_IRDwd2z__uBQ_vLSygZgypUB
"""

from collections import defaultdict, deque
import networkx as nx
import matplotlib.pyplot as plt

def is_bipartite(graph):
    def bfs(start):
        queue = deque([(start, 0)])
        visited.add(start)

        while queue:
            current, color = queue.popleft()

            for neighbor in graph[current]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    color_map[neighbor] = 1 - color
                    queue.append((neighbor, 1 - color))
                elif color_map[neighbor] == color:
                    return False

        return True

    visited = set()
    color_map = {}

    for vertex in graph:
        if vertex not in visited:
            color_map[vertex] = 0
            if not bfs(vertex):
                return False, {}

    return True, color_map

def read_edgelist(file_path):
    edges = []

    with open(file_path, 'r') as file:
        for line in file:
            if line.strip():
                u, v, _ = line.split()[:3]
                edges.append((int(u), int(v)))

    return edges

def visualize_graph(graph, bipartite_result, color_map, output_path):
    G = nx.Graph()

    for node, neighbors in graph.items():
        G.add_node(node)
        G.add_edges_from((node, neighbor) for neighbor in neighbors)

    pos = nx.spring_layout(G)

    if bipartite_result:
        colors = ['red' if color_map[node] == 0 else 'blue' for node in G.nodes()]
    else:
        colors = 'lightgray'

    nx.draw(G, pos, with_labels=True, node_color=colors)
    plt.title(f'Is Bipartite? {bipartite_result}')
    plt.savefig(output_path)
    plt.show()

file_path = 'graph5.edgelist'  # اسم فایل یال ها
output_path = 'output_graph5.png'
edges = read_edgelist(file_path)

graph = defaultdict(list)

for edge in edges:
    u, v = edge
    graph[u].append(v)
    graph[v].append(u)

result, color_map = is_bipartite(graph)
print(result)

visualize_graph(graph, result, color_map, output_path)